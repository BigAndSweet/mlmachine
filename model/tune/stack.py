
import numpy as np
from collections import OrderedDict

from sklearn import model_selection

def modelParamBuilder(self, scoreDf, modelIx):
    """
    Info:
        Description:
            Return dictionary of parameter : value pairs
            to be passed as kwarg to model. Used to efficiently
            reinstantiated specific model variants that
        Parameters:
            scoreDf : Pandas DataFrame
                DataFrame containing score summary generated by
                PowerGridSearcher
            modelIx : int
                Row index specific model described on scoreDf to 
                be turned into dictionary containing parameter : value
                pairs.
    """
    df = scoreDf.loc[modelIx][5:].dropna(axis = 0)
    
    # convert floats that are effectively ints to ints
    for ix in df.index:
        if not isinstance(df[ix], str):
            if int(df[ix]) == df[ix] and isinstance(df[ix], float):
                df[ix] = df[ix].astype(np.int64)

    return df.to_dict()

class SklearnHelper():
    def __init__(self, clf, seed = 0, params = None):
        params['random_state'] = seed
        self.clf = clf(**params)

    def train(self, x_train, y_train):
        self.clf.fit(x_train, y_train)

    def predict(self, x):
        return self.clf.predict(x)
    
    def fit(self, x, y):
        return self.clf.fit(x, y)
    
    # def feature_importances(self, x, y):
    #     print(self.clf.fit(x, y).feature_importances_)

    def feature_importances(self, x, y):
        return self.clf.fit(x, y).feature_importances_

def oofGenerator(self, clf, x_train, y_train, x_valid, nfolds = 10):
    # row counts
    ntrain = x_train.shape[0]
    nvalid = x_valid.shape[0]
    
    # kfold train/test index generator
    kf = model_selection.KFold(n_splits = nfolds)
        
    # 
    oof_train = np.zeros((ntrain,))
    oof_valid = np.zeros((nvalid,))
    oof_valid_skf = np.empty((nfolds, nvalid))

    # iterate through all kfolds to train model, capture scores
    for i, (train_index, test_index) in enumerate(kf.split(x_train)):
        x_tr = x_train[train_index]
        y_tr = y_train[train_index]
        x_te = x_train[test_index]

        clf.train(x_tr, y_tr)

        oof_train[test_index] = clf.predict(x_te)
        oof_valid_skf[i, :] = clf.predict(x_valid)

    # record average score
    oof_valid[:] = oof_valid_skf.mean(axis = 0)
    return oof_train.reshape(-1, 1), oof_valid.reshape(-1, 1)
